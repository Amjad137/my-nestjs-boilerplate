/* eslint-disable */
export default async () => {
    const t = {
        ["./app/dtos/app.env.dto"]: await import("./app/dtos/app.env.dto"),
        ["./modules/user/dtos/user.dto"]: await import("./modules/user/dtos/user.dto"),
        ["./modules/auth/dtos/auth.dto"]: await import("./modules/auth/dtos/auth.dto"),
        ["./modules/auth/dtos/password-reset.dto"]: await import("./modules/auth/dtos/password-reset.dto"),
        ["./modules/s3/dtos/s3.dto"]: await import("./modules/s3/dtos/s3.dto")
    };
    return { "@nestjs/swagger": { "models": [[import("./app/dtos/app.env.dto"), { "AppEnvDto": { NODE_ENV: { required: false, enum: t["./app/dtos/app.env.dto"].ENVIRONMENT }, APP_HOST: { required: true, type: () => String }, APP_PORT: { required: true, type: () => Number }, APP_TZ: { required: false, type: () => String }, APP_GLOBAL_PREFIX: { required: false, type: () => String }, APP_URL_VERSION_ENABLE: { required: false, type: () => Boolean }, APP_URL_VERSION_PREFIX: { required: false, type: () => String }, APP_URL_VERSION: { required: false, type: () => String }, DATABASE_URL: { required: false, type: () => String }, DATABASE_DEBUG: { required: false, type: () => Boolean }, JWT_SECRET: { required: false, type: () => String }, JWT_EXPIRES_IN: { required: false, type: () => String }, AWS_ACCESS_KEY_ID: { required: false, type: () => String }, AWS_SECRET_ACCESS_KEY: { required: false, type: () => String }, AWS_REGION: { required: false, type: () => String }, S3_BUCKET_NAME: { required: false, type: () => String }, MIDDLEWARE_CORS_ORIGIN: { required: false, type: () => String } } }], [import("./common/database/bases/base.entity"), { "BaseEntity": { _id: { required: true, type: () => require("mongoose").Types.ObjectId }, deleted: { required: true, type: () => Boolean }, createdAt: { required: true, type: () => Date }, createdBy: { required: false, type: () => require("mongoose").Types.ObjectId }, updatedAt: { required: true, type: () => Date }, updatedBy: { required: false, type: () => require("mongoose").Types.ObjectId }, deletedAt: { required: false, type: () => Date }, deletedBy: { required: false, type: () => require("mongoose").Types.ObjectId }, __v: { required: true, type: () => Number } } }], [import("./common/database/dtos/base.dto"), { "BaseEntityDto": { _id: { required: true, type: () => String }, createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date }, createdBy: { required: false, type: () => String }, updatedBy: { required: false, type: () => String }, deleted: { required: false, type: () => Boolean }, deletedAt: { required: false, type: () => Date }, deletedBy: { required: false, type: () => String } } }], [import("./modules/user/dtos/user.dto"), { "CreateUserDto": { firstName: { required: true, type: () => String }, lastName: { required: true, type: () => String }, email: { required: true, type: () => String, format: "email" }, phoneNumber: { required: true, type: () => String }, address: { required: true, type: () => String }, avatar: { required: false, type: () => String }, password: { required: true, type: () => String, minLength: 6 }, role: { required: false, enum: t["./modules/user/dtos/user.dto"].ENUM_USER_ROLE } }, "UpdateUserDto": { passwordResetToken: { required: false, type: () => String }, passwordResetExpires: { required: false, type: () => Date }, emailVerificationToken: { required: false, type: () => String }, salt: { required: false, type: () => String } }, "UpdatePasswordDto": { hashedPassword: { required: true, type: () => String, minLength: 6 }, salt: { required: true, type: () => String }, passwordResetToken: { required: false, type: () => String }, passwordResetExpires: { required: false, type: () => Date } }, "UserResponseDto": { email: { required: true, type: () => String }, phoneNumber: { required: true, type: () => String }, firstName: { required: true, type: () => String }, lastName: { required: true, type: () => String }, address: { required: true, type: () => String }, role: { required: true, enum: t["./modules/user/dtos/user.dto"].ENUM_USER_ROLE }, avatar: { required: false, type: () => String }, isActive: { required: true, type: () => Boolean }, isEmailVerified: { required: true, type: () => Boolean }, lastLoginAt: { required: false, type: () => Date } } }], [import("./modules/user/repository/entities/user.entity"), { "UserEntity": { firstName: { required: true, type: () => String }, lastName: { required: true, type: () => String }, email: { required: true, type: () => String }, phoneNumber: { required: true, type: () => String }, password: { required: true, type: () => String }, role: { required: true, enum: t["./modules/user/dtos/user.dto"].ENUM_USER_ROLE }, avatar: { required: false, type: () => String }, address: { required: true, type: () => String }, isActive: { required: true, type: () => Boolean }, isEmailVerified: { required: true, type: () => Boolean }, emailVerificationToken: { required: false, type: () => String }, passwordResetToken: { required: false, type: () => String }, passwordResetExpires: { required: false, type: () => Date }, lastLoginAt: { required: false, type: () => Date }, salt: { required: true, type: () => String } } }], [import("./modules/auth/dtos/password-reset.dto"), { "ChangePasswordDto": { currentPassword: { required: true, type: () => String }, newPassword: { required: true, type: () => String, minLength: 8 } }, "ForgotPasswordDto": { email: { required: true, type: () => String } }, "ResetPasswordDto": { token: { required: true, type: () => String }, newPassword: { required: true, type: () => String, minLength: 8 } }, "PasswordResetResponseDto": { message: { required: true, type: () => String }, timestamp: { required: true, type: () => String } } }], [import("./modules/session/entities/session.entity"), { "SessionEntity": { userId: { required: true, type: () => require("mongoose").Types.ObjectId }, refreshToken: { required: true, type: () => String }, expiresAt: { required: true, type: () => Date }, userAgent: { required: true, type: () => String } } }], [import("./modules/auth/dtos/auth.dto"), { "LoginDto": { email: { required: true, type: () => String, format: "email" }, password: { required: true, type: () => String } }, "RegisterDto": {}, "AuthResponseDto": { accessToken: { required: true, type: () => String }, user: { required: true, type: () => t["./modules/user/dtos/user.dto"].UserResponseDto } } }], [import("./common/database/dtos/pagination.dto"), { "PaginationQueryDto": { page: { required: false, type: () => Number, default: 1, minimum: 1 }, limit: { required: false, type: () => Number, default: 20, minimum: 1, maximum: 100 }, search_key: { required: false, type: () => String }, sort_by: { required: false, type: () => String }, sort_order: { required: false, type: () => Object, default: "desc" } } }], [import("./modules/s3/dtos/s3.dto"), { "PresignedUrlRequestDto": { fileType: { required: true, type: () => String }, folder: { required: true, type: () => String }, keyCount: { required: true, type: () => Number, default: 1, minimum: 1, maximum: 10 }, oldKeys: { required: false, type: () => [String] } }, "PresignedUrlResponseDto": { key: { required: true, type: () => String }, presignedUrl: { required: true, type: () => String } }, "PublicUploadResponseDto": { publicUrl: { required: true, type: () => String } }, "DeleteFilesRequestDto": { keys: { required: true, type: () => [String] } }, "FileUrlResponseDto": { url: { required: false, type: () => String } } }]], "controllers": [[import("./modules/auth/auth.controller"), { "AuthController": { "login": { type: t["./modules/auth/dtos/auth.dto"].AuthResponseDto }, "register": { type: t["./modules/auth/dtos/auth.dto"].AuthResponseDto }, "refresh": { type: t["./modules/auth/dtos/auth.dto"].AuthResponseDto }, "getProfile": { type: Object }, "logout": {}, "changePassword": { type: t["./modules/auth/dtos/password-reset.dto"].PasswordResetResponseDto }, "forgotPassword": {}, "resetPassword": { type: t["./modules/auth/dtos/password-reset.dto"].PasswordResetResponseDto } } }], [import("./modules/user/user.controller"), { "UserController": { "updateProfile": { type: t["./modules/user/dtos/user.dto"].UserResponseDto }, "changeMyPassword": {}, "create": { type: t["./modules/user/dtos/user.dto"].UserResponseDto }, "findAllAdmin": {}, "findOneAdmin": { type: t["./modules/user/dtos/user.dto"].UserResponseDto }, "updateAdmin": { type: t["./modules/user/dtos/user.dto"].UserResponseDto }, "removeAdmin": {} } }], [import("./modules/health/health.controller"), { "HealthController": { "check": { type: Object } } }], [import("./modules/s3/s3.controller"), { "S3Controller": { "getPublicUploadUrls": { type: [t["./modules/s3/dtos/s3.dto"].PublicUploadResponseDto] }, "getSecureUploadUrls": { type: [t["./modules/s3/dtos/s3.dto"].PresignedUrlResponseDto] }, "deleteFiles": {}, "getFileUrl": { type: t["./modules/s3/dtos/s3.dto"].FileUrlResponseDto } } }]] } };
};