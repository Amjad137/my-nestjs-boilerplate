/* eslint-disable */
export default async () => {
    const t = {
        ["./app/dtos/app.env.dto"]: await import("./app/dtos/app.env.dto"),
        ["./modules/user/dtos/user.dto"]: await import("./modules/user/dtos/user.dto"),
        ["./modules/post/repository/entities/post.entity"]: await import("./modules/post/repository/entities/post.entity"),
        ["./modules/comment/repository/entities/comment.entity"]: await import("./modules/comment/repository/entities/comment.entity"),
        ["./modules/comment/dtos/comment.dto"]: await import("./modules/comment/dtos/comment.dto"),
        ["./modules/like/entities/like.entity"]: await import("./modules/like/entities/like.entity"),
        ["./modules/auth/dtos/auth.dto"]: await import("./modules/auth/dtos/auth.dto"),
        ["./modules/auth/dtos/password-reset.dto"]: await import("./modules/auth/dtos/password-reset.dto"),
        ["./modules/like/dtos/like.dto"]: await import("./modules/like/dtos/like.dto"),
        ["./modules/s3/dtos/s3.dto"]: await import("./modules/s3/dtos/s3.dto")
    };
    return { "@nestjs/swagger": { "models": [[import("./app/dtos/app.env.dto"), { "AppHttpDto": { host: { required: false, type: () => String }, port: { required: false, type: () => Number } }, "AppUrlVersionDto": { enable: { required: false, type: () => Boolean }, prefix: { required: false, type: () => String }, version: { required: false, type: () => String } }, "AppEnvDto": { env: { required: false, enum: t["./app/dtos/app.env.dto"].ENVIRONMENT }, timezone: { required: false, type: () => String }, http: { required: false, type: () => t["./app/dtos/app.env.dto"].AppHttpDto }, globalPrefix: { required: false, type: () => String }, urlVersion: { required: false, type: () => t["./app/dtos/app.env.dto"].AppUrlVersionDto }, version: { required: false, type: () => String } } }], [import("./common/database/bases/base.entity"), { "BaseEntity": { _id: { required: true, type: () => require("mongoose").Types.ObjectId }, deleted: { required: true, type: () => Boolean }, createdAt: { required: true, type: () => Date }, createdBy: { required: false, type: () => require("mongoose").Types.ObjectId }, updatedAt: { required: true, type: () => Date }, updatedBy: { required: false, type: () => require("mongoose").Types.ObjectId }, deletedAt: { required: false, type: () => Date }, deletedBy: { required: false, type: () => require("mongoose").Types.ObjectId }, __v: { required: true, type: () => Number } } }], [import("./common/database/dtos/base.dto"), { "BaseEntityDto": { _id: { required: true, type: () => String }, createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date }, createdBy: { required: false, type: () => String }, updatedBy: { required: false, type: () => String }, deleted: { required: false, type: () => Boolean }, deletedAt: { required: false, type: () => Date }, deletedBy: { required: false, type: () => String } } }], [import("./modules/user/dtos/user.dto"), { "CreateUserDto": { firstName: { required: true, type: () => String }, lastName: { required: true, type: () => String }, email: { required: true, type: () => String, format: "email" }, phoneNumber: { required: true, type: () => String }, address: { required: true, type: () => String }, avatar: { required: false, type: () => String }, password: { required: true, type: () => String, minLength: 6 }, role: { required: false, enum: t["./modules/user/dtos/user.dto"].ENUM_USER_ROLE } }, "UpdateUserDto": { passwordResetToken: { required: false, type: () => String }, passwordResetExpires: { required: false, type: () => Date }, emailVerificationToken: { required: false, type: () => String }, salt: { required: false, type: () => String } }, "UpdatePasswordDto": { hashedPassword: { required: true, type: () => String, minLength: 6 }, salt: { required: true, type: () => String }, passwordResetToken: { required: false, type: () => String }, passwordResetExpires: { required: false, type: () => Date } }, "UserResponseDto": { email: { required: true, type: () => String }, phoneNumber: { required: true, type: () => String }, firstName: { required: true, type: () => String }, lastName: { required: true, type: () => String }, address: { required: true, type: () => String }, role: { required: true, enum: t["./modules/user/dtos/user.dto"].ENUM_USER_ROLE }, avatar: { required: false, type: () => String }, isActive: { required: true, type: () => Boolean }, isEmailVerified: { required: true, type: () => Boolean }, lastLoginAt: { required: false, type: () => Date } } }], [import("./modules/user/repository/entities/user.entity"), { "UserEntity": { firstName: { required: true, type: () => String }, lastName: { required: true, type: () => String }, email: { required: true, type: () => String }, phoneNumber: { required: true, type: () => String }, password: { required: true, type: () => String }, role: { required: true, enum: t["./modules/user/dtos/user.dto"].ENUM_USER_ROLE }, avatar: { required: false, type: () => String }, address: { required: true, type: () => String }, isActive: { required: true, type: () => Boolean }, isEmailVerified: { required: true, type: () => Boolean }, emailVerificationToken: { required: false, type: () => String }, passwordResetToken: { required: false, type: () => String }, passwordResetExpires: { required: false, type: () => Date }, lastLoginAt: { required: false, type: () => Date }, salt: { required: true, type: () => String } } }], [import("./modules/auth/dtos/password-reset.dto"), { "ChangePasswordDto": { currentPassword: { required: true, type: () => String }, newPassword: { required: true, type: () => String, minLength: 8 } }, "ForgotPasswordDto": { email: { required: true, type: () => String } }, "ResetPasswordDto": { token: { required: true, type: () => String }, newPassword: { required: true, type: () => String, minLength: 8 } }, "PasswordResetResponseDto": { message: { required: true, type: () => String }, timestamp: { required: true, type: () => String } } }], [import("./modules/session/entities/session.entity"), { "SessionEntity": { userId: { required: true, type: () => require("mongoose").Types.ObjectId }, refreshToken: { required: true, type: () => String }, expiresAt: { required: true, type: () => Date }, userAgent: { required: true, type: () => String } } }], [import("./modules/auth/dtos/auth.dto"), { "LoginDto": { email: { required: true, type: () => String, format: "email" }, password: { required: true, type: () => String } }, "RegisterDto": {}, "AuthResponseDto": { accessToken: { required: true, type: () => String }, user: { required: true, type: () => t["./modules/user/dtos/user.dto"].UserResponseDto } } }], [import("./common/database/dtos/pagination.dto"), { "PaginationQueryDto": { page: { required: false, type: () => Number, default: 1, minimum: 1 }, limit: { required: false, type: () => Number, default: 20, minimum: 1, maximum: 100 }, search_key: { required: false, type: () => String }, sort_by: { required: false, type: () => String }, sort_order: { required: false, type: () => Object, default: "desc" } } }], [import("./modules/post/repository/entities/post.entity"), { "PostEntity": { slug: { required: true, type: () => String }, content: { required: true, type: () => String }, featuredImage: { required: false, type: () => String }, author: { required: true, type: () => require("mongoose").Types.ObjectId }, status: { required: true, enum: t["./modules/post/repository/entities/post.entity"].ENUM_POST_STATUS }, publishedAt: { required: false, type: () => Date }, tags: { required: false, type: () => [String] }, allowComments: { required: true, type: () => Boolean }, metaDescription: { required: false, type: () => String }, metaKeywords: { required: false, type: () => [String] }, viewCount: { required: true, type: () => Number }, likeCount: { required: true, type: () => Number }, commentCount: { required: true, type: () => Number } } }], [import("./modules/post/dtos/post.dto"), { "CreatePostDto": { slug: { required: false, type: () => String }, content: { required: true, type: () => String }, featuredImage: { required: false, type: () => String }, status: { required: false, enum: t["./modules/post/repository/entities/post.entity"].ENUM_POST_STATUS }, tags: { required: false, type: () => [String] } }, "UpdatePostDto": {}, "PostResponseDto": { slug: { required: true, type: () => String }, content: { required: true, type: () => String }, featuredImage: { required: false, type: () => String }, status: { required: true, enum: t["./modules/post/repository/entities/post.entity"].ENUM_POST_STATUS }, viewCount: { required: false, type: () => Number }, tags: { required: false, type: () => [String] }, author: { required: false, type: () => Object }, createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date }, publishedAt: { required: false, type: () => Date } } }], [import("./modules/comment/repository/entities/comment.entity"), { "CommentEntity": { content: { required: true, type: () => String }, author: { required: true, type: () => require("mongoose").Types.ObjectId }, post: { required: true, type: () => require("mongoose").Types.ObjectId }, parent: { required: false, type: () => require("mongoose").Types.ObjectId }, status: { required: true, enum: t["./modules/comment/repository/entities/comment.entity"].ENUM_COMMENT_STATUS }, likeCount: { required: true, type: () => Number }, replyCount: { required: true, type: () => Number } } }], [import("./modules/comment/dtos/comment.dto"), { "CreateCommentDto": { content: { required: true, type: () => String }, post: { required: true, type: () => require("mongoose").Types.ObjectId }, parent: { required: false, type: () => require("mongoose").Types.ObjectId, nullable: true }, status: { required: false, enum: t["./modules/comment/dtos/comment.dto"].ENUM_COMMENT_STATUS } }, "UpdateCommentDto": {}, "MarkSpamDto": { status: { required: true, enum: t["./modules/comment/dtos/comment.dto"].ENUM_COMMENT_STATUS } }, "CommentResponseDto": { _id: { required: true, type: () => String }, content: { required: true, type: () => String }, status: { required: true, enum: t["./modules/comment/dtos/comment.dto"].ENUM_COMMENT_STATUS }, likeCount: { required: true, type: () => Number }, replyCount: { required: true, type: () => Number }, parent: { required: false, type: () => String, nullable: true }, post: { required: false, type: () => Object }, author: { required: false, type: () => Object }, createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date } } }], [import("./modules/like/entities/like.entity"), { "LikeEntity": { user: { required: true, type: () => require("mongoose").Types.ObjectId }, likeType: { required: true, enum: t["./modules/like/entities/like.entity"].ENUM_LIKE_TYPE }, targetId: { required: true, type: () => require("mongoose").Types.ObjectId }, uniqueKey: { required: true, type: () => String } } }], [import("./modules/like/dtos/like.dto"), { "LikePostDto": { postId: { required: true, type: () => String } }, "LikeCommentDto": { commentId: { required: true, type: () => String } }, "UnlikePostDto": { postId: { required: true, type: () => String } }, "UnlikeCommentDto": { commentId: { required: true, type: () => String } }, "LikeResponseDto": { _id: { required: true, type: () => String }, user: { required: true, type: () => String }, likeType: { required: true, enum: t["./modules/like/entities/like.entity"].ENUM_LIKE_TYPE }, targetId: { required: true, type: () => String }, createdAt: { required: true, type: () => Date }, updatedAt: { required: true, type: () => Date } }, "LikeCountResponseDto": { count: { required: true, type: () => Number }, isLiked: { required: true, type: () => Boolean } } }], [import("./modules/s3/dtos/s3.dto"), { "PresignedUrlRequestDto": { fileType: { required: true, type: () => String }, folder: { required: true, type: () => String }, keyCount: { required: true, type: () => Number, default: 1, minimum: 1, maximum: 10 }, oldKeys: { required: false, type: () => [String] } }, "PresignedUrlResponseDto": { key: { required: true, type: () => String }, presignedUrl: { required: true, type: () => String } }, "PublicUploadResponseDto": { publicUrl: { required: true, type: () => String } }, "DeleteFilesRequestDto": { keys: { required: true, type: () => [String] } }, "FileUrlResponseDto": { url: { required: false, type: () => String } } }]], "controllers": [[import("./modules/auth/auth.controller"), { "AuthController": { "login": { type: t["./modules/auth/dtos/auth.dto"].AuthResponseDto }, "register": { type: t["./modules/auth/dtos/auth.dto"].AuthResponseDto }, "refresh": { type: t["./modules/auth/dtos/auth.dto"].AuthResponseDto }, "getProfile": { type: Object }, "logout": {}, "changePassword": { type: t["./modules/auth/dtos/password-reset.dto"].PasswordResetResponseDto }, "forgotPassword": {}, "resetPassword": { type: t["./modules/auth/dtos/password-reset.dto"].PasswordResetResponseDto } } }], [import("./modules/user/user.controller"), { "UserController": { "updateProfile": { type: t["./modules/user/dtos/user.dto"].UserResponseDto }, "changeMyPassword": {}, "create": { type: t["./modules/user/dtos/user.dto"].UserResponseDto }, "findAllAdmin": {}, "findOneAdmin": { type: t["./modules/user/dtos/user.dto"].UserResponseDto }, "updateAdmin": { type: t["./modules/user/dtos/user.dto"].UserResponseDto }, "removeAdmin": {} } }], [import("./modules/post/post.controller"), { "PostController": { "findPublished": { type: Object }, "findBySlug": { type: Object }, "findMyPosts": { type: Object }, "create": { type: Object }, "update": { type: Object }, "removeSelf": {}, "findAllAdmin": {}, "publish": { type: Object }, "unpublish": { type: Object }, "remove": {} } }], [import("./modules/comment/comment.controller"), { "CommentController": { "findByPost": { type: Object }, "findRootCommentsByPost": { type: Object }, "findRepliesByParent": { type: Object }, "findByAuthor": { type: Object }, "findSpamComments": { type: [Object] }, "findReplies": { type: Object }, "findOne": { type: Object }, "create": { type: Object }, "update": { type: Object }, "like": { type: Object }, "unlike": { type: Object }, "markAsSpam": { type: Object }, "remove": {} } }], [import("./modules/health/health.controller"), { "HealthController": { "check": { type: Object } } }], [import("./modules/like/like.controller"), { "LikeController": { "likePost": { type: Object }, "likeComment": { type: Object }, "unlikePost": {}, "unlikeComment": {}, "getPostLikes": { type: [t["./modules/like/dtos/like.dto"].LikeResponseDto] }, "getCommentLikes": { type: [t["./modules/like/dtos/like.dto"].LikeResponseDto] }, "getPostLikeCount": { type: t["./modules/like/dtos/like.dto"].LikeCountResponseDto }, "getCommentLikeCount": { type: t["./modules/like/dtos/like.dto"].LikeCountResponseDto }, "getUserLikes": { type: [t["./modules/like/dtos/like.dto"].LikeResponseDto] } } }], [import("./modules/s3/s3.controller"), { "S3Controller": { "getPublicUploadUrls": { type: [t["./modules/s3/dtos/s3.dto"].PublicUploadResponseDto] }, "getSecureUploadUrls": { type: [t["./modules/s3/dtos/s3.dto"].PresignedUrlResponseDto] }, "deleteFiles": {}, "getFileUrl": { type: t["./modules/s3/dtos/s3.dto"].FileUrlResponseDto } } }]] } };
};